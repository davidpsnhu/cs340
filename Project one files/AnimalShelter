{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pymongo import MongoClient\n",
    "from bson.objectid import ObjectId\n",
    "\n",
    "class AnimalShelter(object):\n",
    "\n",
    "    def __init__(self):\n",
    "        # Initializing the MongoClient. This helps to \n",
    "        # access the MongoDB databases and collections. \n",
    "       \n",
    "        self.client = MongoClient('mongodb://127.0.0.1:43510' % ('aacuser', '1'))\n",
    "        self.database = self.client['AAC']\n",
    "\n",
    "# Complete this create method to implement the C in CRUD.\n",
    "    def create(self, data):\n",
    "        if data is not None:\n",
    "            insert = self.database.animals.insert(data)  # data should be dictionary \n",
    "            if insert!=0:\n",
    "                return True\n",
    "            else:\n",
    "                return False           \n",
    "        else:\n",
    "            raise Exception(\"Nothing to save, because data parameter is empty\")\n",
    "\n",
    "\n",
    "    # Create method to implement the R in CRUD.\n",
    "    def read(self, lookup):\n",
    "\n",
    "        # criteria is not None then this find will return all rows which matches the criteria\n",
    "        if lookup is not None:\n",
    "         # {'_id':False} just omits the unique ID of each row        \n",
    "            \n",
    "            data = self.database.animals.find(lookup)\n",
    "            return data\n",
    "        else:\n",
    "        #if there is no search criteria then all the rows will be return  \n",
    "            error = 'Error, no results found'\n",
    "        return error    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
